#!/usr/bin/env bash

set -e

original_args=$*

usage() {
	echo "usage: cache [--ttl SECONDS] [--cache-status CACHEABLE-STATUSES] [--stale_while_revalidate SECONDS] [cache-key] [command] [args for command]"
	echo "	--ttl				# Treat previously cached content as fresh if fewer than SECONDS seconds have passed"
	echo "	--cache-status			# Quoted and space-delimited exit statuses for [command] that are acceptable to cache."
	echo "	--check				# Returns 0 if the content is cached and 1 if content is uncached or the TTL/SWR conditions are unmet."
	echo "	--stale-while-revalidate	# Serve stale content for SECONDS past TTL while updating in the background"
	echo "	--help				# show this help documentation"
}

while [[ $# -gt 0 ]]
do
	key="$1"

	case $key in
		--cache-status)
			acceptable_statuses="$2"
			shift # drop the key
			shift # drop the value
			;;
		--check)
			check_only=0
			shift; # drop the key
			;;
		--force-stale)
			force_stale=1
			shift # drop the key
			;;
		--help)
			usage
			exit 0
			;;
		--purge)
			purge=0
			shift # drop the key
			;;
		--stale-while-revalidate)
			stale_while_revalidate="$2"
			shift # drop the key
			shift # drop the value
			;;
		--ttl)
			ttl="$2"
			shift # drop the key
			shift # drop the value
			;;
		--)
			cache_key=$2
			shift # drop the --
			shift # drop the cache key
			break
			;;
		*) # default
			if [ -z "$cache_key" ]; then
				cache_key=$1
				shift
			else
				break;
			fi
			;;
	esac
done

if [ -z "$cache_key" ]; then
	echo "Error: You must provide a cache key and command"
	exit 64
fi

cache_dir=${CACHE_DIR:-$TMPDIR}
cache_file="$cache_dir$cache_key"

if [ -n "$purge" ]; then
	if [ -f "$cache_file" ]; then
		rm "$cache_file"
	fi
	exit 0
fi

if [ -z "$1" ] && [ -z "$check_only" ]; then
	echo "Error: You must provide a command"
	exit 64
fi

fresh () {
	# if the $cache_file doesn't exist, it can't be fresh
	if [ ! -f "$cache_file" ]; then
		return 1
	fi

	# if we don't have a ttl specifed, our $cache_file is
	# fresh-enough
	if [ -z "$ttl" ]; then
		return 0
	fi

	# if a ttl is specified, we need to check the last modified
	# timestamp on the $cache_file
	if [[ "$OSTYPE" == "darwin"* ]]; then
		mtime=$(stat -f %m "$cache_file")
	else
		mtime=$(stat -c %Y "$cache_file")
	fi

	now=$(date +%s)
	remaining_time=$((now - mtime))

	if [ $remaining_time -lt "$ttl" ]; then
		return 0
	fi

	if [ $remaining_time -lt $((ttl + stale_while_revalidate)) ]; then
		update_in_background=1
		return 0
	fi

	return 1
}

if [ -z "$force_stale" ] && fresh; then
	[ -n "$check_only" ] && exit 0

	status=$(cat "$cache_file.cache-status")

	cat "$cache_file"
else
	[ -n "$check_only" ] && exit 1

	"$@" | tee "$cache_file"
	status=${PIPESTATUS[0]}

	acceptable_statuses=${acceptable_statuses:-0}
	if [[ $acceptable_statuses != "*" ]] && [[ ! " $acceptable_statuses " = *" $status "* ]]; then
		rm "$cache_file"
	else
		echo "$status" > "$cache_file.cache-status"
	fi
fi

if [ "$update_in_background" = "1" ]; then
	# We re-run the original command with the original args + --force-stale to
	# prevent the possibility of leveraging --stale-while-revalidate again.
	#
	# the & puts this in the background
	# the > /dev/null mean the STDOUT of the command won't show up in the
	# current script's output
	#
	#
	# shellcheck disable=SC2086
	${BASH_SOURCE[0]} --force-stale $original_args > /dev/null &
fi

exit "$status"
